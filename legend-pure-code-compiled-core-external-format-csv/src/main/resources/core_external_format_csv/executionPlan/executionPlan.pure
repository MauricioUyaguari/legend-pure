// Copyright 2021 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::external::format::csv::executionPlan::*;
import meta::external::language::java::factory::*;
import meta::external::language::java::factory::project::*;
import meta::external::language::java::metamodel::*;
import meta::external::language::java::metamodel::project::*;
import meta::external::language::java::transform::*;
import meta::external::shared::format::binding::*;
import meta::external::shared::format::binding::validation::*;
import meta::external::shared::format::executionPlan::*;
import meta::external::shared::format::executionPlan::engine::*;
import meta::external::shared::format::metamodel::*;
import meta::external::shared::runtime::*;
import meta::pure::executionPlan::*;
import meta::pure::executionPlan::engine::*;
import meta::pure::executionPlan::engine::java::*;
import meta::pure::executionPlan::engine::java::naming::*;
import meta::pure::executionPlan::engine::java::typeInfo::*;
import meta::pure::executionPlan::toString::*;
import meta::pure::graphFetch::*;
import meta::pure::metamodel::serialization::grammar::*;
import meta::pure::router::extension::*;
import meta::pure::runtime::*;



Class meta::external::format::csv::executionPlan::CSVSerializeExecutionNode extends ExternalFormatSerializeExecutionNode
{
}

Class meta::external::format::csv::executionPlan::CSVDeserializeExecutionNode extends ExternalFormatDeserializeExecutionNode 
{

   binding : Binding[1];
   //TODO probably not needed for csv
   tree    : RootGraphFetchTree<Any>[0..1]; 
}

function meta::external::format::csv::executionPlan::generateSerializeNode(checked:Boolean[1], binding:Binding[1], children:ExecutionNode[*]): ExternalFormatSerializeExecutionNode[1]
{
   ^CSVSerializeExecutionNode(
      resultType      = ^ResultType(type=String),
      resultSizeRange = PureOne,
      checked         = $checked,
      binding         = $binding,
      executionNodes  = $children
   );
}

function meta::external::format::csv::executionPlan::generateDeserializeNode(connection:Connection[1], children:ExecutionNode[1], tree: RootGraphFetchTree<Any>[0..1]): ExecutionNode[1]
{
   //TODO: Should support without a graph fetch tree
   assert($tree->isNotEmpty(), 'Deserialization without Graph Fetch Tree not yet supported');
   let returnedClass = $tree.class->toOne();
   
   ^CSVDeserializeExecutionNode(
      resultType      = ^PartialClassResultType(
                           type=$returnedClass,
                           propertiesWithParameters = $tree.subTrees->cast(@PropertyGraphFetchTree)->map(x | $x->map(x | ^PropertyWithParameters(property = $x.property, parameters = $x.parameters)))
                        ),
      resultSizeRange = ZeroMany,
      tree            = $tree,
      binding         = $connection->cast(@ExternalFormatConnection).element->cast(@Binding),
      executionNodes  = $children
   );
}


function meta::external::format::csv::executionPlan::planJavaPrepare(path:String[1], context:GenerationContext[1], extensions:RouterExtension[*], debug:DebugContext[1]): Function<{Nil[1]->GenerationContext[1]}>[*]
{
   [
      node:CSVSerializeExecutionNode[1]   | $context,
      node:CSVDeserializeExecutionNode[1] | $context
   ]
}

function meta::external::format::csv::executionPlan::planJavaGenerate(path:String[1], context:GenerationContext[1], extensions:RouterExtension[*], debug:DebugContext[1]): Function<{Nil[1]->GeneratedCode[1]}>[*]
{
   [];
}

function meta::external::format::csv::executionPlan::printPlanNodeToString(space:String[1], extensions:RouterExtension[*]): Function<{Nil[1]->String[1]}>[*]
{
   [
      {node:CSVSerializeExecutionNode[1] |
         'CSV_Serialize\n' + 
         $space + '(' + header($node, $space, $extensions) + '\n' +
         $space + '  checked = ' + $node.checked->toString() + '\n' +
         $space + '  binding = ' + $node.binding->elementToPath() + '\n' +
         $node->childrenToString($space+'  ', $extensions) + '\n' +
         $node.implementation->printImplementation('implementation', $space+'  ', $extensions) +
         $space + ')\n'
      },
      {node:CSVDeserializeExecutionNode[1] |
         'CSV_Deserialize\n' + 
         $space + '(' + header($node, $space, $extensions) + '\n' +
         $space + '  binding = ' + $node.binding->elementToPath() + '\n' +
         $node->childrenToString($space+'  ', $extensions) + '\n' +
         $node.implementation->printImplementation('implementation', $space+'  ', $extensions) +
         $space + ')\n'
      }
   ]
}